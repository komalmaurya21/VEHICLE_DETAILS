--CREATE DATABASE

CREATE DATABASE VEHICLES_DETAILS

USE VEHICLES_DETAILS


--CREATE TABLES AND LIST ALL THE COLUMNS DATATYPE IS VARCHAR (MAX)

CREATE TABLE STOLEN_VEHICLES
(VEHICLE_ID VARCHAR(MAX) ,VEHICLE_TYPE VARCHAR(MAX),MAKE_ID NVARCHAR(MAX),MODEL_YEAR VARCHAR(MAX),VEHICLE_DESC VARCHAR(MAX),COLOUR VARCHAR(MAX),DATE_STOLEN VARCHAR(MAX),LOCATION_ID NVARCHAR(MAX))

CREATE TABLE MAKE_DETAILS
(MAKE_ID VARCHAR(MAX),MAKE_NAME VARCHAR(MAX),MAKE_TYPE VARCHAR(MAX))

CREATE TABLE LOCATIONS
(LOCATION_ID NVARCHAR(MAX),REGION VARCHAR(MAX),COUNTRY VARCHAR(MAX),POPULATION VARCHAR(MAX),DENSITY VARCHAR(MAX))


--BULK INSERT  OF DATA TO THE CREATED TABLES

BULK INSERT STOLEN_VEHICLES
FROM 'C:\Users\ASUS\OneDrive\Desktop\SQL\stolen_vehicles (1).csv'
WITH (FIELDTERMINATOR =',',ROWTERMINATOR='\n',FIRSTROW=2)

SELECT*FROM STOLEN_VEHICLES


BULK INSERT MAKE_DETAILS
FROM 'C:\Users\ASUS\OneDrive\Desktop\SQL\make_details.csv'
WITH (FIELDTERMINATOR=',',ROWTERMINATOR='\n',FIRSTROW=2)

SELECT *FROM MAKE_DETAILS

BULK INSERT LOCATIONS
FROM 'C:\Users\ASUS\OneDrive\Desktop\SQL\locations.csv'
WITH (FIELDTERMINATOR=',',ROWTERMINATOR='\n',FIRSTROW=2)

SELECT*FROM LOCATIONS

--LET'S CHECK THEIR COLUMN_NAME AND MATCH THEIR DATATYPE

SELECT COLUMN_NAME,DATA_TYPE
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME IN ( 'STOLEN_VEHICLES')

SELECT COLUMN_NAME,DATA_TYPE
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME IN('MAKE_DETAILS')


SELECT COLUMN_NAME,DATA_TYPE
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME IN ('LOCATIONS')


---CHECK THE NON DATE VALUES

SELECT*FROM STOLEN_VEHICLES

SELECT *FROM STOLEN_VEHICLES
WHERE ISDATE(DATE_STOLEN)=0


UPDATE STOLEN_VEHICLES SET DATE_STOLEN= CASE WHEN DATE_STOLEN='2021/15/10' THEN '2021-10-15'
WHEN DATE_STOLEN ='13-02-2022' THEN '2022-02-13'
ELSE DATE_STOLEN
END

---ALTER ALL THE COLUMNS DATA_TYPE ACCORDINGLY

ALTER TABLE STOLEN_VEHICLES
ALTER COLUMN DATE_STOLEN DATE

ALTER TABLE STOLEN_VEHICLES
ALTER COLUMN VEHICLE_ID INT


ALTER TABLE STOLEN_VEHICLES
ALTER COLUMN MAKE_ID INT

SELECT MAKE_ID 
FROM STOLEN_VEHICLES

UPDATE STOLEN_VEHICLES SET MAKE_ID='623'
WHERE MAKE_ID ='623-11'


UPDATE STOLEN_VEHICLES SET MAKE_ID='503'
WHERE MAKE_ID ='503-11*'



ALTER TABLE STOLEN_VEHICLES
ALTER COLUMN LOCATION_ID INT


ALTER TABLE LOCATIONS
ALTER COLUMN LOCATION_ID INT

ALTER TABLE LOCATIONS
ALTER COLUMN POPULATION INT

ALTER TABLE LOCATIONS
ALTER COLUMN DENSITY DECIMAL(7,2)

ALTER TABLE MAKE_DETAILS
ALTER COLUMN MAKE_ID INT



SELECT COLUMN_NAME,DATA_TYPE
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME IN ('STOLEN_VEHICLES','MAKE_DETAILS','LOCATIONS')


---CHECHKING DUPLICATE & DELETE THEM 
-- THEIR IS NO DUPLICATE DATA SO THAT I CREATED AND THEN I GENERATE CODE TO REMOVE THE PARTICAL DUPLICATE DATA 

SELECT  *FROM STOLEN_VEHICLES

INSERT INTO STOLEN_VEHICLES
VALUES(1,'Trailer',623,'2021','BST2021D','Silver','2021-11-05','102')

select *from STOLEN_VEHICLES
order by VEHICLE_ID

--CHECK DUPLICACY 

WITH CHECK_DUPLICATE AS(SELECT*,ROW_NUMBER()OVER (PARTITION BY VEHICLE_ID,VEHICLE_TYPE ORDER BY VEHICLE_ID) 'ROW_NUM'
FROM STOLEN_VEHICLES)
SELECT * FROM CHECK_DUPLICATE
WHERE ROW_NUM >1

--DELETE DUPLICATE DATA AND KEPT ONLY ONE IN THE DATA

WITH CHECK_DUPLICATE AS(SELECT*,ROW_NUMBER () OVER(PARTITION BY VEHICLE_ID,VEHICLE_TYPE ORDER BY VEHICLE_ID) 'ROW_NUM'
FROM STOLEN_VEHICLES)
DELETE FROM CHECK_DUPLICATE
WHERE ROW_NUM>1


 --- CHECK DUPLICATE DATA ALSO IN MAKE_DETAILS & LOCATIONS TABLE

 SELECT *FROM MAKE_DETAILS

 WITH CHECK_DUPLICATE AS(SELECT*, ROW_NUMBER() OVER(PARTITION BY MAKE_ID ORDER BY MAKE_ID) 'ROW_NUM'
 FROM MAKE_DETAILS)
 SELECT *FROM CHECK_DUPLICATE
 WHERE  ROW_NUM>1

 WITH CHECK_DUPLICATE AS(SELECT*, ROW_NUMBER() OVER(PARTITION BY LOCATION_ID ORDER BY LOCATION_ID) 'ROW_NUM'
 FROM LOCATIONS)
 SELECT *FROM CHECK_DUPLICATE
 WHERE  ROW_NUM>1

  SELECT *FROM STOLEN_VEHICLES
   SELECT *FROM LOCATIONS
    SELECT *FROM MAKE_DETAILS

---AVERAGE AGE OF STOLEN VEHICLE BASED ON CURRENT YEAR

SELECT* FROM STOLEN_VEHICLES

SELECT VEHICLE_TYPE ,
AVG(DATEDIFF(YEAR,MODEL_YEAR,GETDATE())) AS 'AGE_OF_VEHICLE'
FROM STOLEN_VEHICLES
GROUP BY VEHICLE_TYPE


--FILTER WEEKDAYS

SELECT* , DATENAME(WEEKDAY,DATE_STOLEN) AS 'DAY_NAME'
FROM STOLEN_VEHICLES
WHERE DATENAME(WEEKDAY,DATE_STOLEN) NOT IN ('SATURDAY','SUNDAY')


--FILTERING WEEKENDS

SELECT* , DATENAME(WEEKDAY,DATE_STOLEN) AS 'DAY_NAME'
FROM STOLEN_VEHICLES
WHERE DATENAME(WEEKDAY,DATE_STOLEN) IN ('SATURDAY','SUNDAY')


--MOST OFTEN STOLEN VEHICLES AS PER COMAPARITIVE WEEKDAYS WITH WEEKENDS

SELECT VEHICLE_TYPE ,
COUNT(VEHICLE_ID) AS 'NO_OF_VEH',
DATENAME(WEEKDAY,DATE_STOLEN)AS 'DAY_NAME'
FROM STOLEN_VEHICLES
WHERE DATENAME(WEEKDAY,DATE_STOLEN) IN ('SATURDAY','SUNDAY')
GROUP BY VEHICLE_TYPE,DATENAME(WEEKDAY,DATE_STOLEN)
ORDER BY NO_OF_VEH DESC


--CALCULATE STOLEN VEHICLE RATE BY REGION (PERCENTAGE)

SELECT L.REGION,
COUNT(SV.VEHICLE_ID) AS 'STOLEN_VEH',
CAST(COUNT(SV.VEHICLE_ID) AS FLOAT)/L.POPULATION*100 AS 'STOLEN_VEH_RATE'
FROM STOLEN_VEHICLES SV
JOIN LOCATIONS L
ON SV.LOCATION_ID=L.LOCATION_ID
GROUP BY L.REGION,L.POPULATION
ORDER BY STOLEN_VEH DESC



---STOLEN_VEH_PROFILE--CREATE A CTE WITH THIS (VEHICLE_ID,VEHICLE_TYPE,MAKE_ID,MAKE_YEAR,VEHICLE_DESC,COLOUR,DATE_STOLEN,LOCATION_ID,REGION,POPULATION,DENSITY)

WITH STOLEN_VEH_PROFILE AS (SELECT SV.VEHICLE_ID,SV.VEHICLE_TYPE,SV.MODEL_YEAR,M.MAKE_TYPE,SV.COLOUR,SV.DATE_STOLEN,L.LOCATION_ID,L.REGION,L.POPULATION,L.DENSITY
FROM LOCATIONS L
JOIN STOLEN_VEHICLES SV
ON L.LOCATION_ID=SV.LOCATION_ID
JOIN MAKE_DETAILS M
ON M.MAKE_ID=SV.MAKE_ID)

SELECT *FROM STOLEN_VEH_PROFILE



--IDENTIFY THE REGION WITH SIMILAR STOLEN_VEHICLE_PROFILE BY CONSIDERING MAKE_name,COLOUR AND MODEL_YEAR

WITH STOLEN_VEH_PROFILE AS (SELECT SV.VEHICLE_ID,SV.VEHICLE_TYPE,SV.MODEL_YEAR,SV.MAKE_ID,M.MAKE_TYPE,M.MAKE_NAME,SV.COLOUR,SV.VEHICLE_DESC,SV.DATE_STOLEN,L.LOCATION_ID,L.REGION,L.POPULATION,L.DENSITY
FROM LOCATIONS L
JOIN STOLEN_VEHICLES SV
ON L.LOCATION_ID=SV.LOCATION_ID
JOIN MAKE_DETAILS M
ON M.MAKE_ID=SV.MAKE_ID)
SELECT REGION,
COUNT(DISTINCT MAKE_NAME) AS 'UNIQUE_MAKE',
COUNT(DISTINCT COLOUR) AS 'UNIQUE_COLOUR',
COUNT(DISTINCT MODEL_YEAR) AS 'UNIQUE_YEAR',
AVG(CAST(POPULATION AS FLOAT)) AS 'SCALES_VALUE_POP',
AVG(CAST(DENSITY AS FLOAT)) AS 'SCALES_VAL_DENSITY'
FROM STOLEN_VEH_PROFILE
GROUP BY REGION
ORDER BY REGION


/*GENERATE A REPORT THAT IDENTIFIES THE REGION WITH HIGHEST DENSITY OF STOLEN VEHICLE FOR EACH REGION ,LIST VEHICLE_DESC, COLOUR, DATE_STOLEN,MAKE _NAME,. INCLUDE ONLY THE STOLEN VEHICLE_TYPE TRAILER AND EXCLUDE STOLEN 
VEHICLE WITH A MODEL YEAR OLDER THAN 2018 .THE FIRST 3 REGIONS*/

WITH STOLEN_VEH_DETAILS AS(
SELECT L.REGION,L.DENSITY,SV.VEHICLE_DESC,SV.DATE_STOLEN,M.MAKE_NAME,SV.COLOUR
FROM STOLEN_VEHICLES SV
JOIN MAKE_DETAILS M
ON SV.MAKE_ID=M.MAKE_ID
JOIN LOCATIONS L
ON L.LOCATION_ID=SV.LOCATION_ID
WHERE SV.VEHICLE_TYPE = 'TRAILER' OR
SV.MODEL_YEAR>= YEAR(2018))
SELECT TOP 3 REGION, MAX(DENSITY ) AS 'HIGHEST_DENSITY',
VEHICLE_DESC,DATE_STOLEN,MAKE_NAME,COLOUR
FROM STOLEN_VEH_DETAILS
GROUP BY REGION,VEHICLE_DESC,DATE_STOLEN,MAKE_NAME,COLOUR
ORDER BY HIGHEST_DENSITY DESC


/*GENERATE A REPORT THAT IDENTIFIES THE REGION WITH HIGHEST DENSITY OF STOLEN VEHICLE FOR EACH REGION ,LIST VEHICLE_DESC, COLOUR, DATE_STOLEN,MAKE _NAME,. INCLUDE ONLY THE STOLEN VEHICLE_TYPE SALOON OR ROADBIKE 
AND EXCLUDE STOLEN _VEHICLE WITH A MODEL YEAR OLDER THAN AND EQUAL TO 2019 .THE FIRST 5 REGIONS*/

WITH STOLEN_VEHCLE_PROFILE AS(SELECT L.REGION,L.DENSITY,SV.VEHICLE_DESC,SV.VEHICLE_TYPE,SV.COLOUR,SV.DATE_STOLEN,M.MAKE_NAME
FROM STOLEN_VEHICLES SV
JOIN LOCATIONS L
ON SV.LOCATION_ID=L.LOCATION_ID
JOIN MAKE_DETAILS M
ON M.MAKE_ID=SV.MAKE_ID
WHERE SV.VEHICLE_TYPE ='SALOON' OR SV.VEHICLE_TYPE='ROADBIKE'
AND
SV.MODEL_YEAR>=YEAR(2019))
SELECT TOP 5 REGION,
MAX(DENSITY) AS 'HIGHEST_DENSITY',
VEHICLE_DESC,VEHICLE_TYPE,COLOUR,DATE_STOLEN,MAKE_NAME
FROM STOLEN_VEHCLE_PROFILE
GROUP BY REGION,VEHICLE_DESC,VEHICLE_TYPE,DATE_STOLEN,MAKE_NAME,COLOUR
ORDER BY HIGHEST_DENSITY DESC


/*VISUALIZE THE TOP 3 STOLEN_VEHICLE_COUNT AND BOTTOM 3 STOLEN_VEHICLE_COUNT AND REMIANING 1 DAY AS NA  ,IN A ONE OUTPUT AS PER THE DAYS OF WEEK*/

 WITH RANKED_VEHICLE AS(SELECT  DATENAME(WEEKDAY,DATE_STOLEN) AS 'DAY_NAME',
 COUNT(VEHICLE_ID) AS 'STOLEN_VEH_COUNT',
 RANK() OVER (ORDER BY COUNT(VEHICLE_ID) DESC) AS'TOP_RANK',
 RANK() OVER (ORDER BY COUNT(VEHICLE_ID))  AS 'BOTTOM_RANK'
 FROM STOLEN_VEHICLES
 GROUP BY DATENAME(WEEKDAY,DATE_STOLEN))
 SELECT DAY_NAME,STOLEN_VEH_COUNT,
 CASE WHEN  TOP_RANK<=3 THEN 'TOP' + CAST(TOP_RANK AS VARCHAR(5))
 WHEN BOTTOM_RANK <=3 THEN 'BOTTOM' + CAST(BOTTOM_RANK AS VARCHAR(5))
 ELSE 'NA'
 END AS 'RANKING'
 FROM RANKED_VEHICLE
 ORDER BY STOLEN_VEH_COUNT DESC


 

